// We will include the C standard library to use printf
// To include the stdio library, we need to use the #[include] annotation
#[include(from="<stdio.h>", name="printf")]
/*
  _ is an especial case of identifier, only _ is allowed any other identifier that starts with _ is not allowed
*/
fun printf(format: CString, _: CVarArgs)

fun printBool(b: Bool) {
  if(b) {
    printf(c"true\n")
  } else {
    printf(c"false\n")
  }
}

fun boolToStr(b: Bool): CString {
  if(b) {
    return c"true"
  } else {
    return c"false"
  }
}

fun biggerThan32(n: Int): Int {
  if(n > 32) {
    return 1
  } elif(n < 32) {
    return -1
  } else {
    return 0
  }
}

pub let c: Int32 = 43
let d = 44

// Main function can have any name
// but must be annotated with #[entrypoint]
#[entrypoint]
fun main(): Int32 {

  // this function can be used only in the main function
  fun printInt(i: Int32) {
    // Print an integer using printf
    printf(c"%d\n", i)
  }

  fun printIntPtr(i: ro* Int) {
    // Print an integer using printf
    printf(c"%ld\n", *i)
  }

  // Here we use a c string literal
  // The c prefix indicates that this is a C string literal
  printf(c"Hello, World!\n")

  // test math
  let a: Int32 = c * 2
  let b = 8 + a
  printInt(b * n87())
  printIntPtr(&d)

  printBool(true or false)
  printBool(true and false)

  printf(c"is d == 44: %s\n", boolToStr(d == 44))
  printf(c"is d == 43: %s\n", boolToStr(d == 43))

  printf(c"biggerThan32(43): %ld\n", biggerThan32(43))
  printf(c"biggerThan32(32): %ld\n", biggerThan32(32))
  printf(c"biggerThan32(31): %ld\n", biggerThan32(31))

  return 0
}

fun n87(): Int32 {
  return 87
}